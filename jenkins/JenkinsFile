pipeline {
    agent any
    parameters {
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Tag for the Docker image')
    }
    environment {
        DOCKER_IMAGE = "book-app:${params.IMAGE_TAG}"
        DOCKER_REPO = "nivas1907/capstone"
        ECR_REPO = "636768524979.dkr.ecr.il-central-1.amazonaws.com/capstone"
    }
    stages {
        stage('checkout code'){
            steps {
                git branch: 'master', url: 'https://github.com/priya0119/Books-Exchange-Project.git'
            }
        }
        stage('Build docker image'){
            steps{
                script{
                    docker.build("${DOCKER_IMAGE}")
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Docker_Credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    sh "docker tag ${DOCKER_IMAGE} ${DOCKER_REPO}:${params.IMAGE_TAG}"
                    sh "docker push ${DOCKER_REPO}:${params.IMAGE_TAG}"
                }
            }
        }
        stage('Login to AWS ECR') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credentials']]) {
                    script {
                        sh 'aws ecr get-login-password --region il-central-1 | docker login --username AWS --password-stdin 636768524979.dkr.ecr.il-central-1.amazonaws.com'
                    }
                }
            }
        }

        stage('Push to AWS ECR') {
            steps {
                script {
                    sh "docker tag ${DOCKER_IMAGE} ${ECR_REPO}:${params.IMAGE_TAG}"
                    sh "docker push ${ECR_REPO}:${params.IMAGE_TAG}"
                }
            }
        }
        stage('deploy using kubu') {
            steps{
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credentials']]) {
                    script {
                        sh "aws eks update-kubeconfig --name Book-app-cluster --region il-central-1"
                        sh "kubectl apply -f dep.yml "
                    }
                }
            }
        }
    }
    post {
        success {
            echo "✅ Build and deployment completed successfully!"
        }
        failure {
            echo "❌ Build or deployment failed. Check logs for details."
        }
    }
}